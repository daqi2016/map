<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	        http://www.springframework.org/schema/beans   
	        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	        http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
	        http://www.springframework.org/schema/context  
	        http://www.springframework.org/schema/context/spring-context-3.0.xsd   
	        http://www.springframework.org/schema/tx
	        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	        
	        	        <!-- 启动触发器的配置开始 -->
    <bean name="startQuertz" lazy-init="false" autowire="no"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myJobTrigger" />
            </list>
        </property>
    </bean>
    <!-- 启动触发器的配置结束 -->
 
    <!-- quartz-2.x的配置 -->
    <bean id="myJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="myJobDetail" />
        </property>
        <property name="cronExpression">
            <!--middle night 24. do it  -->
            <value>0 0 2 * * ?</value>
        </property>
    </bean>
    <!-- 调度的配置结束 -->
 
    <!-- job的配置开始 -->
    <bean id="myJobDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="statisticsJob" />
        </property>
        <property name="targetMethod">
            <value>execute</value>
        </property>
    </bean>
    <!-- job的配置结束 -->
 
    <!-- 工作的bean -->
    <bean id="statisticsJob" class="com.qxinli.server.promotion.scheduler.StatisticsJob" />
    
    
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 --> 
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${mysql.jdbcUrl}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${mysql.user}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${mysql.password}" />
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="${mysql.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${mysql.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${mysql.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${mysql.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${mysql.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${mysql.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${mysql.idleConnectionTestPeriod}" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。 Default:30 -->
		<property name="acquireRetryAttempts" value="${mysql.acquireRetryAttempts}" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留,并在下次调用getConnection()的时候继续尝试获取连接。如果设为true,那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default:false -->
		<property name="breakAfterAcquireFailure" value="${mysql.breakAfterAcquireFailure}" />
		<property name="automaticTestTable" value="${mysql.automaticTestTable}" />
	</bean>
	<!-- 自动扫描 带@Component,@Service,@Controller,@Repository 注释的类 -->
	<context:component-scan base-package="com.qxinli.server.promotion.service"></context:component-scan>
	<context:component-scan base-package="com.qxinli.server.promotion.dao"></context:component-scan>
	<context:component-scan base-package="com.qxinli.server.promotion.action"></context:component-scan>
	<context:component-scan base-package="com.qxinli.server.libs.dao"></context:component-scan>
	<context:component-scan base-package="com.qxinli.server.libs.service"></context:component-scan>
	
	

	<!-- mysql配置如下 -->
	<!-- <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"></property> </bean> -->


	<!-- <tx:advice id="txAdvice" transaction-manager="txManager"> <tx:attributes> 
		<tx:method name="*_trans" rollback-for="Exception,RuntimeException" read-only="false" 
		propagation="REQUIRED"/> </tx:attributes> </tx:advice> -->

	<!-- <aop:config> <aop:pointcut id="serviceMethod" expression="execution(* 
		com.zqgame.qn.service.impl.*.*(..))"/> <aop:advisor pointcut-ref="serviceMethod" 
		advice-ref="txAdvice"/> </aop:config> -->
	<!-- manager the action in struts2 -->

	<bean name="jedisConfig" class="com.qxinli.server.promotion.model.RedisConfig">
			<property name="host" value="${jedisConfig.host}" />
			<property name="port" value="${jedisCofnig.port}" />
			<property name="maxTotal" value="${jedisConfig.maxTotal}" />
			<property name="maxIdle" value="${jedisConfig.maxIdle}" />
			<property name="maxWaitMillis" value="${jedisConfig.maxWaitMillis}" />
	</bean>
	
	<bean id="solrClientUtils" class="com.qxinli.server.libs.utils.SolrClientUtils">
		<property name="baseUrl" value="${solr.baseUrl}" />
		<property name="connectionTimeout" value="${solr.connectionTimeout}" />
		<property name="maxTotalConnections" value="${solr.maxTotalConnections}" />
		<property name="defaultMaxConnectionsPerHost" value="${solr.defaultMaxConnectionsPerHost}" />
		<property name="soTimeout" value="${solr.soTimeout}" />
	</bean>
</beans>